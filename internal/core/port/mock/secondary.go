// Code generated by MockGen. DO NOT EDIT.
// Source: secondary.go
//
// Generated by this command:
//
//	mockgen -source=secondary.go -destination=mock/secondary.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	model "github.com/antoinecrochet/free-board/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTimeSheetPort is a mock of TimeSheetPort interface.
type MockTimeSheetPort struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSheetPortMockRecorder
	isgomock struct{}
}

// MockTimeSheetPortMockRecorder is the mock recorder for MockTimeSheetPort.
type MockTimeSheetPortMockRecorder struct {
	mock *MockTimeSheetPort
}

// NewMockTimeSheetPort creates a new mock instance.
func NewMockTimeSheetPort(ctrl *gomock.Controller) *MockTimeSheetPort {
	mock := &MockTimeSheetPort{ctrl: ctrl}
	mock.recorder = &MockTimeSheetPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeSheetPort) EXPECT() *MockTimeSheetPortMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockTimeSheetPort) FindByUserID(userId int64) ([]*model.TimeSheet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userId)
	ret0, _ := ret[0].([]*model.TimeSheet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockTimeSheetPortMockRecorder) FindByUserID(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockTimeSheetPort)(nil).FindByUserID), userId)
}

// FindByUserIDAndDay mocks base method.
func (m *MockTimeSheetPort) FindByUserIDAndDay(userId int64, day string) (*model.TimeSheet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndDay", userId, day)
	ret0, _ := ret[0].(*model.TimeSheet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndDay indicates an expected call of FindByUserIDAndDay.
func (mr *MockTimeSheetPortMockRecorder) FindByUserIDAndDay(userId, day any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndDay", reflect.TypeOf((*MockTimeSheetPort)(nil).FindByUserIDAndDay), userId, day)
}

// Save mocks base method.
func (m *MockTimeSheetPort) Save(timeSheet *model.TimeSheet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", timeSheet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTimeSheetPortMockRecorder) Save(timeSheet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTimeSheetPort)(nil).Save), timeSheet)
}

// Update mocks base method.
func (m *MockTimeSheetPort) Update(timeSheet *model.TimeSheet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", timeSheet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTimeSheetPortMockRecorder) Update(timeSheet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTimeSheetPort)(nil).Update), timeSheet)
}
