// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/service.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	model "github.com/antoinecrochet/free-board/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBoardManager is a mock of BoardManager interface.
type MockBoardManager struct {
	ctrl     *gomock.Controller
	recorder *MockBoardManagerMockRecorder
	isgomock struct{}
}

// MockBoardManagerMockRecorder is the mock recorder for MockBoardManager.
type MockBoardManagerMockRecorder struct {
	mock *MockBoardManager
}

// NewMockBoardManager creates a new mock instance.
func NewMockBoardManager(ctrl *gomock.Controller) *MockBoardManager {
	mock := &MockBoardManager{ctrl: ctrl}
	mock.recorder = &MockBoardManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardManager) EXPECT() *MockBoardManagerMockRecorder {
	return m.recorder
}

// DeleteTimeSheet mocks base method.
func (m *MockBoardManager) DeleteTimeSheet(userId, timeSheetID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeSheet", userId, timeSheetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeSheet indicates an expected call of DeleteTimeSheet.
func (mr *MockBoardManagerMockRecorder) DeleteTimeSheet(userId, timeSheetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSheet", reflect.TypeOf((*MockBoardManager)(nil).DeleteTimeSheet), userId, timeSheetID)
}

// GetTimeSheet mocks base method.
func (m *MockBoardManager) GetTimeSheet(userId, timeSheetID int64) (*model.TimeSheet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSheet", userId, timeSheetID)
	ret0, _ := ret[0].(*model.TimeSheet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSheet indicates an expected call of GetTimeSheet.
func (mr *MockBoardManagerMockRecorder) GetTimeSheet(userId, timeSheetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSheet", reflect.TypeOf((*MockBoardManager)(nil).GetTimeSheet), userId, timeSheetID)
}

// GetTimeSheets mocks base method.
func (m *MockBoardManager) GetTimeSheets(userId int64, from, to string) ([]*model.TimeSheet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSheets", userId, from, to)
	ret0, _ := ret[0].([]*model.TimeSheet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSheets indicates an expected call of GetTimeSheets.
func (mr *MockBoardManagerMockRecorder) GetTimeSheets(userId, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSheets", reflect.TypeOf((*MockBoardManager)(nil).GetTimeSheets), userId, from, to)
}

// SaveTimeSheet mocks base method.
func (m *MockBoardManager) SaveTimeSheet(userId int64, day string, hours float64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTimeSheet", userId, day, hours)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTimeSheet indicates an expected call of SaveTimeSheet.
func (mr *MockBoardManagerMockRecorder) SaveTimeSheet(userId, day, hours any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTimeSheet", reflect.TypeOf((*MockBoardManager)(nil).SaveTimeSheet), userId, day, hours)
}

// UpdateTimeSheetHours mocks base method.
func (m *MockBoardManager) UpdateTimeSheetHours(userId, timeSheetID int64, hours float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeSheetHours", userId, timeSheetID, hours)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeSheetHours indicates an expected call of UpdateTimeSheetHours.
func (mr *MockBoardManagerMockRecorder) UpdateTimeSheetHours(userId, timeSheetID, hours any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeSheetHours", reflect.TypeOf((*MockBoardManager)(nil).UpdateTimeSheetHours), userId, timeSheetID, hours)
}
